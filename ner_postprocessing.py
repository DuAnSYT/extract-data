#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Improved NER Postprocessing - Handle fuzzy substring matching
"""

import re
from typing import Dict, List
from collections import Counter
try:
    from rapidfuzz import fuzz
    RAPIDFUZZ_AVAILABLE = True
except ImportError:
    print("Warning: rapidfuzz not installed. Install with: pip install rapidfuzz")
    from difflib import SequenceMatcher
    RAPIDFUZZ_AVAILABLE = False


class NERPostProcessor:
    """Improved Postprocessing cho k·∫øt qu·∫£ NER v·ªõi fuzzy substring matching"""
    
    def __init__(self):
        # Regex patterns cho c√°c ƒë·ªãa ch·ªâ cho ph√©p
        self.allowed_locations = [
            r'(?i).*(?:tp\s*\.?\s*)?h[·ªì√¥]\s*ch[√≠i]\s*minh.*',
            r'(?i).*s√†i\s*g[√≤on].*',
            r'(?i).*b[√†a]\s*r[·ªãi]a\s*v[≈©u]ng\s*t[√†a]u.*',
            r'(?i).*b[√¨i]nh\s*d[∆∞∆°uong].*',
            r'(?i).*hcm.*',
            r'(?i).*tphcm.*',
            r'(?i).*th√†nh\s*ph·ªë\s*h·ªì\s*ch√≠\s*minh.*',
        ]
        
        # Compile regex patterns
        self.location_patterns = [re.compile(pattern) for pattern in self.allowed_locations]
    
    def fuzzy_similarity(self, a: str, b: str) -> float:
        """T√≠nh ƒë·ªô t∆∞∆°ng t·ª± fuzzy gi·ªØa 2 string v·ªõi RapidFuzz"""
        if RAPIDFUZZ_AVAILABLE:
            return fuzz.ratio(a.lower().strip(), b.lower().strip()) / 100.0
        else:
            # Fallback to difflib
            return SequenceMatcher(None, a.lower().strip(), b.lower().strip()).ratio()
    
    def fuzzy_partial_similarity(self, a: str, b: str) -> float:
        """T√≠nh ƒë·ªô t∆∞∆°ng t·ª± partial (substring) fuzzy"""
        if RAPIDFUZZ_AVAILABLE:
            return fuzz.partial_ratio(a.lower().strip(), b.lower().strip()) / 100.0
        else:
            # Fallback: t·ª± implement partial ratio ƒë∆°n gi·∫£n
            a_clean = a.lower().strip()
            b_clean = b.lower().strip()
            
            if len(a_clean) > len(b_clean):
                longer, shorter = a_clean, b_clean
            else:
                longer, shorter = b_clean, a_clean
            
            best_ratio = 0
            for i in range(len(longer) - len(shorter) + 1):
                substring = longer[i:i + len(shorter)]
                ratio = SequenceMatcher(None, shorter, substring).ratio()
                best_ratio = max(best_ratio, ratio)
            
            return best_ratio
    
    def is_substring_or_similar(self, short: str, long: str, threshold: float = 0.8, partial_threshold: float = 0.9) -> bool:
        """
        Ki·ªÉm tra xem short c√≥ ph·∫£i substring ho·∫∑c t∆∞∆°ng t·ª± v·ªõi long kh√¥ng
        Bao g·ªìm c·∫£ fuzzy substring matching
        
        Args:
            short: Chu·ªói ng·∫Øn h∆°n
            long: Chu·ªói d√†i h∆°n  
            threshold: Ng∆∞·ª°ng cho full similarity
            partial_threshold: Ng∆∞·ª°ng cho partial similarity (cao h∆°n v√¨ ch·ªâ so s√°nh 1 ph·∫ßn)
        """
        short_clean = short.lower().strip()
        long_clean = long.lower().strip()
        
        # Case 1: Exact substring
        if short_clean in long_clean:
            return True
        
        # Case 2: Full fuzzy similarity (to√†n b·ªô string t∆∞∆°ng t·ª±)
        if self.fuzzy_similarity(short_clean, long_clean) >= threshold:
            return True
        
        # Case 3: Partial fuzzy similarity (substring nh∆∞ng vi·∫øt kh√°c 1 t√≠)
        # V√≠ d·ª•: "HANA" trong "H·ªá th·ªëng th·∫©m m·ªπ HANNA"
        if self.fuzzy_partial_similarity(short_clean, long_clean) >= partial_threshold:
            return True
            
        return False
    
    def is_similar_organizations(self, org1: str, org2: str, threshold: float = 0.8, partial_threshold: float = 0.9) -> bool:
        """
        Ki·ªÉm tra 2 organizations c√≥ t∆∞∆°ng t·ª± nhau kh√¥ng
        X·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p substring v√† fuzzy matching
        """
        org1_clean = org1.lower().strip()
        org2_clean = org2.lower().strip()
        
        # X√°c ƒë·ªãnh c√°i n√†o ng·∫Øn h∆°n, d√†i h∆°n
        if len(org1_clean) <= len(org2_clean):
            shorter, longer = org1_clean, org2_clean
        else:
            shorter, longer = org2_clean, org1_clean
        
        # Ki·ªÉm tra substring ho·∫∑c similar
        return self.is_substring_or_similar(shorter, longer, threshold, partial_threshold)
    
    def is_allowed_location(self, location: str) -> bool:
        """Ki·ªÉm tra xem ƒë·ªãa ch·ªâ c√≥ thu·ªôc v√πng cho ph√©p kh√¥ng"""
        location_clean = location.strip()
        
        for pattern in self.location_patterns:
            if pattern.search(location_clean):
                return True
        
        return False
    
    def process_organizations(self, org_entities: List[Dict], threshold: float = 0.8, partial_threshold: float = 0.9) -> str:
        """
        X·ª≠ l√Ω danh s√°ch organizations v·ªõi improved fuzzy matching
        Tr·∫£ v·ªÅ organization name t·ªët nh·∫•t
        
        Args:
            org_entities: List entities c·ªßa ORG
            threshold: Ng∆∞·ª°ng cho full similarity  
            partial_threshold: Ng∆∞·ª°ng cho partial similarity
        """
        if not org_entities:
            return ""
        
        # L·∫•y t·∫•t c·∫£ text c·ªßa organizations
        org_texts = [entity['text'].strip() for entity in org_entities]
        
        if len(org_texts) == 1:
            return org_texts[0]
        
        # ƒê·∫øm frequency c·ªßa t·ª´ng organization (exact match)
        org_counter = Counter(org_texts)
        
        # Group c√°c organizations t∆∞∆°ng t·ª± nhau
        grouped_orgs = {}
        processed = set()
        
        for i, org in enumerate(org_texts):
            if org in processed:
                continue
                
            # T√¨m t·∫•t c·∫£ organizations t∆∞∆°ng t·ª± v·ªõi org n√†y
            similar_orgs = [org]
            
            for j, other_org in enumerate(org_texts):
                if i != j and other_org not in processed:
                    # Ki·ªÉm tra xem c√≥ t∆∞∆°ng t·ª± nhau kh√¥ng (bao g·ªìm fuzzy substring)
                    if self.is_similar_organizations(org, other_org, threshold, partial_threshold):
                        similar_orgs.append(other_org)
            
            # Ch·ªçn c√°i d√†i nh·∫•t trong group
            longest_org = max(similar_orgs, key=len)
            
            # T√≠nh t·ªïng count cho group n√†y
            total_count = sum(org_counter[similar_org] for similar_org in similar_orgs)
            
            grouped_orgs[longest_org] = total_count
            
            # ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
            for similar_org in similar_orgs:
                processed.add(similar_org)
        
        # Ch·ªçn organization c√≥ count cao nh·∫•t
        if grouped_orgs:
            best_org = max(grouped_orgs.items(), key=lambda x: x[1])[0]
            return best_org.strip()
        
        return ""
    
    def process_addresses(self, loc_entities: List[Dict]) -> List[str]:
        """
        X·ª≠ l√Ω danh s√°ch ƒë·ªãa ch·ªâ, ch·ªâ gi·ªØ l·∫°i nh·ªØng ƒë·ªãa ch·ªâ thu·ªôc v√πng cho ph√©p
        """
        if not loc_entities:
            return []
        
        allowed_addresses = []
        seen_addresses = set()
        
        for entity in loc_entities:
            address = entity['text'].strip()
            address_lower = address.lower()
            
            # Ki·ªÉm tra tr√πng l·∫∑p v√† location h·ª£p l·ªá
            if address_lower not in seen_addresses and self.is_allowed_location(address):
                allowed_addresses.append(address)
                seen_addresses.add(address_lower)
        
        return allowed_addresses
    
    def postprocess(self, ner_results: Dict, threshold: float = 0.8, partial_threshold: float = 0.9) -> Dict:
        """
        Main postprocessing function v·ªõi improved fuzzy matching
        
        Args:
            ner_results: Output t·ª´ VietnameseNERPredictor
            threshold: Ng∆∞·ª°ng cho full similarity (0.0-1.0)
            partial_threshold: Ng∆∞·ª°ng cho partial similarity (0.0-1.0)
            
        Returns:
            Dict v·ªõi format: {
                'organization_name': str,
                'address': List[str]
            }
        """
        entities_by_type = ner_results.get('entities_by_type', {})
        
        # X·ª≠ l√Ω organizations v·ªõi improved logic
        org_entities = entities_by_type.get('ORG', [])
        organization_name = self.process_organizations(org_entities, threshold, partial_threshold)
        
        # X·ª≠ l√Ω locations/addresses
        loc_entities = entities_by_type.get('LOC', [])
        addresses = self.process_addresses(loc_entities)
        
        # C√≥ th·ªÉ th√™m x·ª≠ l√Ω cho c√°c entity type kh√°c n·∫øu c·∫ßn
        gpe_entities = entities_by_type.get('GPE', [])
        if gpe_entities:
            gpe_addresses = self.process_addresses(gpe_entities)
            # Merge v√† lo·∫°i b·ªè tr√πng l·∫∑p
            all_addresses = addresses + gpe_addresses
            addresses = list(dict.fromkeys(all_addresses))
        
        return {
            'organization_name': organization_name,
            'address': addresses
        }


# üöÄ QUICK FUNCTION - Global instance
_processor = None

def get_processor():
    """Lazy initialization c·ªßa processor"""
    global _processor
    if _processor is None:
        _processor = NERPostProcessor()
    return _processor


def quick_postprocess(ner_results: Dict, threshold: float = 0.8, partial_threshold: float = 0.9) -> Dict:
    """
    üöÄ QUICK FUNCTION: Improved postprocess v·ªõi fuzzy substring matching
    
    Args:
        ner_results: Output t·ª´ VietnameseNERPredictor
        threshold: Ng∆∞·ª°ng cho full similarity (0.0-1.0)
        partial_threshold: Ng∆∞·ª°ng cho partial similarity (0.0-1.0, th∆∞·ªùng cao h∆°n threshold)
        
    Returns:
        Dict v·ªõi format: {
            'organization_name': str,
            'address': List[str]
        }
    """
    processor = get_processor()
    return processor.postprocess(ner_results, threshold, partial_threshold)


def test_improved_fuzzy():
    """üß™ Test improved fuzzy substring matching"""
    
    processor = NERPostProcessor()
    
    # Test cases cho fuzzy substring
    test_cases = [
        ("HANA", "H·ªá th·ªëng th·∫©m m·ªπ HANNA"),  # Substring nh∆∞ng vi·∫øt kh√°c 1 t√≠
        ("VinMart", "Si√™u th·ªã VinMart Plus"), # Substring exact
        ("BigC", "BigC ThƒÉng Long"),          # Substring exact
        ("Lotte", "Lotte Cinema"),            # Substring exact
        ("ABC", "XYZ Company"),               # Kh√¥ng li√™n quan
        ("Vincom", "Vincom Center"),          # Substring exact
        ("TGDD", "Th·∫ø Gi·ªõi Di ƒê·ªông TGDD"),   # Substring exact
    ]
    
    print("=== Test Fuzzy Substring Matching ===")
    for short, long in test_cases:
        is_similar = processor.is_similar_organizations(short, long)
        partial_sim = processor.fuzzy_partial_similarity(short, long)
        full_sim = processor.fuzzy_similarity(short, long)
        
        print(f"'{short}' vs '{long}':")
        print(f"  Similar: {is_similar}")
        print(f"  Partial similarity: {partial_sim:.3f}")
        print(f"  Full similarity: {full_sim:.3f}")
        print()
    
    # Test v·ªõi real data
    test_ner_results = {
        'entities_by_type': {
            'ORG': [
                {'text': 'HANA', 'label': 'ORG', 'confidence': 0.95},
                {'text': 'H·ªá th·ªëng th·∫©m m·ªπ HANNA', 'label': 'ORG', 'confidence': 0.92},
                {'text': 'HANA', 'label': 'ORG', 'confidence': 0.93},
                {'text': 'VinMart', 'label': 'ORG', 'confidence': 0.90},
                {'text': 'Si√™u th·ªã VinMart Plus', 'label': 'ORG', 'confidence': 0.88},
            ],
            'LOC': [
                {'text': 'TP H·ªì Ch√≠ Minh', 'label': 'LOC', 'confidence': 0.89},
                {'text': 'B√¨nh D∆∞∆°ng', 'label': 'LOC', 'confidence': 0.87},
                {'text': 'H√† N·ªôi', 'label': 'LOC', 'confidence': 0.85}
            ]
        }
    }
    
    print("=== Test Real NER Data ===")
    result = quick_postprocess(test_ner_results)
    print(f"Organization: '{result['organization_name']}'")
    print(f"Addresses: {result['address']}")
    
    print(f"\n=== Using RapidFuzz: {RAPIDFUZZ_AVAILABLE} ===")


if __name__ == "__main__":
    test_improved_fuzzy()